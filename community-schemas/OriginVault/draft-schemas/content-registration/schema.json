{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/decentralized-identity/credential-schemas/main/community-schemas/OriginVault/draft-schemas/content-registration/schema.json",
  "title": "OriginVault Content Registration",
  "description": "A credential that registers a piece of digital content on OriginVault, including its content hash and metadata. Aligns with Schema.org RegisterAction patterns.",
  "type": "object",
  "properties": {
    "@context": {
      "type": "string",
      "format": "uri",
      "default": "https://raw.githubusercontent.com/decentralized-identity/credential-schemas/main/community-schemas/OriginVault/draft-schemas/content-registration/context.json"
    },
    "credentialSubject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uri",
          "description": "The unique identifier for the content item (e.g., CID, URI)."
        },
        "schema:identifier": {
          "type": "object",
          "properties": {
            "schema:propertyID": { "type": "string" },
            "schema:value": { "type": "string" }
          },
          "required": ["schema:propertyID", "schema:value"],
          "additionalProperties": false,
          "description": "Structured identifier containing the content hash."
        },
        "schema:dateCreated": {
          "type": "string",
          "format": "date-time",
          "description": "ISO-8601 timestamp when the content was registered."
        },
        "schema:agent": {
          "oneOf": [
            {
              "type": "string",
              "format": "uri",
              "description": "DID or URI of the registrant."
            },
            {
              "type": "object",
              "properties": {
                "@type": {
                  "type": "string",
                  "enum": ["Person", "Organization"],
                  "default": "Person"
                },
                "schema:@id": { "type": "string", "format": "uri" },
                "schema:name": { "type": "string" },
                "schema:identifier": {
                  "type": "object",
                  "properties": {
                    "schema:propertyID": { "type": "string" },
                    "schema:value": { "type": "string" }
                  },
                  "required": ["schema:propertyID", "schema:value"],
                  "additionalProperties": false
                }
              },
              "required": ["@type", "schema:@id"],
              "additionalProperties": false
            }
          ],
          "description": "Entity that registered the content. Can be a simple URI or structured object following Schema.org Person/Organization patterns."
        },
        "ov:registrationAction": {
          "type": "object",
          "properties": {
            "@type": {
              "type": "string",
              "enum": ["RegisterAction"],
              "default": "RegisterAction",
              "description": "Schema.org action type."
            },
            "schema:agent": {
              "oneOf": [
                { "type": "string", "format": "uri" },
                { "$ref": "#/properties/credentialSubject/properties/schema:agent/oneOf/1" }
              ],
              "description": "The direct performer of the registration action."
            },
            "schema:object": {
              "type": "string",
              "format": "uri",
              "description": "The content being registered (same as credentialSubject.id)."
            },
            "schema:target": {
              "type": "string",
              "format": "uri",
              "description": "The registration endpoint or service."
            },
            "schema:startTime": {
              "type": "string",
              "format": "date-time",
              "description": "When the registration action began."
            },
            "schema:endTime": {
              "type": "string",
              "format": "date-time",
              "description": "When the registration action completed."
            },
            "schema:actionStatus": {
              "type": "string",
              "enum": ["ActiveActionStatus", "CompletedActionStatus", "FailedActionStatus", "PotentialActionStatus"],
              "default": "CompletedActionStatus",
              "description": "Status of the registration action."
            },
            "schema:result": {
              "type": "object",
              "properties": {
                "@type": {
                  "type": "string",
                  "enum": ["CreativeWork"],
                  "default": "CreativeWork"
                },
                "schema:@id": {
                  "type": "string",
                  "format": "uri",
                  "description": "Reference to the registered content."
                },
                "schema:identifier": {
                  "type": "object",
                  "properties": {
                    "schema:propertyID": { "type": "string" },
                    "schema:value": { "type": "string" }
                  },
                  "required": ["schema:propertyID", "schema:value"],
                  "additionalProperties": false
                }
              },
              "required": ["@type", "schema:@id"],
              "additionalProperties": false
            }
          },
          "required": ["@type", "schema:agent", "schema:object", "schema:actionStatus"],
          "additionalProperties": false,
          "description": "Optional Schema.org RegisterAction context for the registration process."
        },
        "schema:url": {
          "type": "string",
          "format": "uri",
          "description": "Canonical URL where the content can be accessed (optional)."
        },
        "ov:softPerceptualHash": {
          "type": "string",
          "description": "8×8 perceptual hash of the content (used for fuzzy duplicate detection)."
        },
        "ov:mediumPerceptualHash": {
          "type": "string",
          "description": "16×16 perceptual hash of the content."
        },
        "ov:precisePerceptualHash": {
          "type": "string",
          "description": "24×24 perceptual hash of the content (highest precision)."
        },
        "schema:accountId": {
          "type": "string",
          "description": "OriginVault username (present for publicly published files)."
        },
        "schema:name": {
          "type": "string",
          "description": "Original filename supplied by the uploader."
        },
        "ov:path": {
          "type": "string",
          "description": "Storage path of the file inside OriginVault object store."
        },
        "ov:status": {
          "type": "string",
          "enum": ["pending", "verified", "published"],
          "description": "Current processing status of the registration record."
        },
        "ov:color": {
          "type": "string",
          "description": "Hex-encoded dominant colour derived from the content (e.g. #a1b2c3)."
        },
        "ov:colorCode": {
          "type": "string",
          "description": "Concatenated colour hash used for fast similarity lookup."
        },
        "ov:mnemonicId": {
          "type": "string",
          "description": "Human-readable snowflake identifier encoded as a mnemonic."
        },
        "schema:encodingFormat": {
          "type": "string",
          "description": "MIME type of the content (e.g., image/jpeg)."
        },
        "schema:contentSize": {
          "type": "string",
          "description": "Size of the content (e.g., 2.4 MB)."
        },
        "schema:uploadDate": {
          "type": "string",
          "format": "date-time",
          "description": "Alias of registrationDate for schema.org compatibility."
        }
      },
      "required": ["id", "schema:identifier", "schema:dateCreated", "ov:softPerceptualHash", "ov:mediumPerceptualHash", "ov:precisePerceptualHash"],
      "additionalProperties": false
    }
  },
  "required": ["credentialSubject", "@context"],
  "additionalProperties": false
} 